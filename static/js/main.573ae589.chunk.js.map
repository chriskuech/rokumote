{"version":3,"sources":["components/RokuContext.tsx","components/Remote.tsx","components/RokuSelector.tsx","components/TV.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["value","storedState","localStorage","getItem","initialRoku","isString","name","ip","config","rokus","notYetDefined","ReferenceError","createContext","roku","setRoku","pressKey","Provider","Consumer","RokuContext","_ref","children","_useState","useState","_useState2","Object","slicedToArray","setContext","react_default","a","createElement","setItem","JSON","stringify","toast","error","key","fetch","concat","method","mode","catch","RokuConsumer","flexCellStyle","flexGrow","padding","size","flexRowStyle","display","gridStyle","gridTemplateColumns","Remote","style","maxWidth","textAlign","cursor","Fragment","className","onClick","dist","Indicator","on","width","height","borderRadius","background","border","margin","RokuSelectorOption","_ref2","selected","alignItems","RokuSelector_Indicator","RokuSelector","_ref3","map","candidateRoku","RokuSelector_RokuSelectorOption","assign","buttonStyle","TV","justifyContent","App","RokuContext_RokuContext","src_components_Remote","position","bottom","left","src_components_RokuSelector","top","right","src_components_TV","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.573ae589.chunk.js","sourcesContent":["import config from \"config.json\";\nimport { isString } from \"util\";\nimport { toast } from \"react-toastify\";\nimport { createContext, FunctionComponent, ReactNode, useState } from \"react\";\nimport React from \"react\";\n\nconst STORAGE_KEY = \"roku\";\n\n///\n// types\n//\n\n// https://developer.roku.com/docs/developer-program/discovery/external-control-api.md#keypress-example\nexport type Key =\n  | \"Home\"\n  | \"Rev\"\n  | \"Fwd\"\n  | \"Play\"\n  | \"Select\"\n  | \"Left\"\n  | \"Right\"\n  | \"Down\"\n  | \"Up\"\n  | \"Back\"\n  | \"InstantReplay\"\n  | \"Info\"\n  | \"Backspace\"\n  | \"Search\"\n  | \"Enter\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"PowerOff\"\n  ;\n\nexport interface Roku {\n  name: string;\n  ip: string;\n}\n\nexport interface Context {\n  roku: Roku;\n  setRoku: (roku: Roku) => void;\n  pressKey: (key: Key) => void;\n}\n\nfunction isRoku(value: any): value is Roku {\n  return value && isString(value.name) && isString(value.ip);\n}\n\n///\n// main\n//\n\nconst storedState = localStorage.getItem(STORAGE_KEY);\nconst initialRoku = isRoku(storedState) ? storedState : config.rokus[0];\n\nconst notYetDefined = () => { throw new ReferenceError(); };\nconst { Provider, Consumer } = createContext<Context>({ roku: initialRoku, setRoku: notYetDefined, pressKey: notYetDefined });\n\nexport const RokuContext: FunctionComponent<{ children: ReactNode }> =\n  ({ children }) => {\n    const [roku, setContext] = useState<Roku>(initialRoku);\n\n    const pressKey: (key: Key) => void =\n      (key) =>\n        fetch(`http://${roku.ip}:8060/keypress/${key}`, { method: \"post\", mode: \"no-cors\" })\n          .catch(toast.error);\n\n    const setRoku: (roku: Roku) => void =\n      (roku) => {\n        try {\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(roku));\n          setContext(roku);\n        } finally {\n          toast.error(\"Failed to update the roku\");\n        }\n      };\n\n    return (\n      <Provider value={{ roku, setRoku, pressKey }}>\n        {children}\n      </Provider>\n    )\n  };\n\nexport const RokuConsumer = Consumer;\n","import React from \"react\";\nimport { Circle, Home, ChevronLeft, ChevronDown, ChevronUp, ChevronRight, ArrowLeft, Rewind, Play, Pause, FastForward, Loader, RotateCcw } from \"react-feather\";\nimport { RokuConsumer } from \"components/RokuContext\";\nimport \"./Remote.css\";\n\nconst size = 50;\nconst gridScaleFactor = 2.3;\nconst padding = size / 2;\nconst flexGrow = 1;\n\nconst flexCellStyle = { flexGrow, padding };\nconst flexRowStyle = { display: \"flex\" };\nconst gridStyle = { display: \"grid\", gridTemplateColumns: \"auto auto auto\" };\n\nconst Remote =\n  () => (\n    <div style={{ maxWidth: 500, textAlign: \"center\", cursor: \"pointer\" }}>\n      <RokuConsumer>\n        {({ pressKey }) => (\n          <>\n            <div style={flexRowStyle}>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Back\")}>\n                <ArrowLeft size={size} />\n              </div>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Home\")}>\n                <Home size={size} />\n              </div>\n            </div>\n            <div style={gridStyle}>\n              <div />\n              <div className=\"remote-button\" onClick={() => pressKey(\"Up\")}>\n                <ChevronUp size={gridScaleFactor * size} />\n              </div>\n              <div />\n              <div className=\"remote-button\" onClick={() => pressKey(\"Left\")}>\n                <ChevronLeft size={gridScaleFactor * size} />\n              </div>\n              <div className=\"remote-button\" onClick={() => pressKey(\"Select\")}>\n                <Circle size={gridScaleFactor * size} />\n              </div>\n              <div className=\"remote-button\" onClick={() => pressKey(\"Right\")}>\n                <ChevronRight size={gridScaleFactor * size} />\n              </div>\n              <div />\n              <div className=\"remote-button\" onClick={() => pressKey(\"Down\")}>\n                <ChevronDown size={gridScaleFactor * size} />\n              </div>\n              <div />\n            </div>\n            <div style={flexRowStyle}>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"InstantReplay\")}>\n                <RotateCcw size={size} />\n              </div>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Info\")}>\n                <Loader size={size} />\n              </div>\n            </div>\n            <div style={flexRowStyle}>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Rev\")}>\n                <Rewind size={size} />\n              </div>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Play\")}>\n                <Play size={size} />\n                <Pause size={size} />\n              </div>\n              <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Fwd\")}>\n                <FastForward size={size} />\n              </div>\n            </div>\n          </>\n        )}\n      </RokuConsumer>\n    </div>\n  );\n\nexport default Remote;\n","import config from \"config.json\";\nimport { FunctionComponent } from \"react\";\nimport React from \"react\";\nimport \"./RokuSelector.css\";\nimport { RokuConsumer } from \"components/RokuContext\";\n\nconst Indicator: FunctionComponent<{ on?: boolean }> =\n  ({ on }) => (\n    <div\n      style={{\n        display: \"inline-block\",\n        width: \"0.8em\",\n        height: \"0.8em\",\n        borderRadius: \"50%\",\n        background: on ? \"rgb(102, 45, 143)\" : \"#333\",\n        border: \"0.2em solid #333\",\n        margin: \"0.5em\"\n      }}\n    />\n  )\n\ninterface RokuSelectorOptionProps {\n  name: string;\n  ip: string;\n  selected?: boolean;\n  onClick: () => void;\n}\n\nconst RokuSelectorOption: FunctionComponent<RokuSelectorOptionProps> =\n  ({ name, selected, onClick }) => (\n    <div style={{ display: \"flex\", alignItems: \"center\" }} onClick={onClick}>\n      <Indicator on={selected} /> <div>{name}</div>\n    </div>\n  );\n\nconst RokuSelector =\n  () => (\n    <div className=\"roku-selector\" style={{ padding: \"0.3em\", display: \"flex\", cursor: \"pointer\" }}>\n      <RokuConsumer>\n        {({ roku, setRoku }) => (\n          <>\n            <div className=\"placeholder\" />\n            <div className=\"options\">\n              {config.rokus.map((candidateRoku) => (\n                <RokuSelectorOption\n                  {...candidateRoku}\n                  onClick={() => setRoku(candidateRoku)}\n                  selected={roku.name === candidateRoku.name}\n                  key={candidateRoku.name}\n                />\n              ))}\n            </div>\n          </>\n        )}\n      </RokuConsumer>\n    </div>\n  );\n\nexport default RokuSelector;\n","import React, { FunctionComponent } from 'react';\nimport { Power, Volume1, Volume2, VolumeX } from \"react-feather\";\nimport \"./TV.css\";\nimport { RokuConsumer } from 'components/RokuContext';\n\nconst size = 50;\nconst padding = 10;\n\nconst buttonStyle = { padding };\n\nconst TV: FunctionComponent =\n  () => (\n    <div className=\"tv\" style={{ padding: \"0.3em\", display: \"flex\", cursor: \"pointer\" }}>\n      <RokuConsumer>\n        {({ pressKey }) => (\n          <>\n            <div className=\"options\">\n              <div className=\"tv-button\" style={buttonStyle}>\n                <Power className=\"power-button\" size={size} onClick={() => pressKey(\"PowerOff\")} />\n              </div>\n              <div className=\"tv-button\" style={buttonStyle}>\n                <Volume2 size={size} onClick={() => pressKey(\"VolumeUp\")} />\n              </div>\n              <div className=\"tv-button\" style={buttonStyle}>\n                <Volume1 size={size} onClick={() => pressKey(\"VolumeDown\")} />\n              </div>\n              <div className=\"tv-button\" style={buttonStyle}>\n                <VolumeX size={size} onClick={() => pressKey(\"VolumeMute\")} />\n              </div>\n            </div>\n            <div className=\"placeholder\" />\n          </>\n        )}\n      </RokuConsumer>\n    </div>\n  )\n\nexport default TV;\n","import React from 'react';\nimport Remote from 'components/Remote';\nimport RokuSelector from './RokuSelector';\nimport TV from './TV';\nimport { RokuContext } from 'components/RokuContext';\n\nconst style = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"100%\"\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\" style={style}>\n      <RokuContext>\n        <Remote />\n        <div style={{ position: \"absolute\", bottom: 0, left: 0 }}>\n          <RokuSelector />\n        </div>\n        <div style={{ position: \"absolute\", top: \"10%\", right: 0 }}>\n          <TV />\n        </div>\n      </RokuContext>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}