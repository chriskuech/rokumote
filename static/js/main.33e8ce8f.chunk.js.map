{"version":3,"sources":["services/roku.ts","components/Remote.tsx","components/RokuSelector.tsx","components/TV.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["value","storedState","localStorage","getItem","roku","isString","name","ip","config","rokus","pressKey","key","fetch","concat","method","mode","catch","toast","error","flexCellStyle","flexGrow","padding","size","flexRowStyle","display","gridStyle","gridTemplateColumns","Remote","react_default","a","createElement","style","maxWidth","textAlign","className","onClick","dist","Indicator","_ref","on","width","height","borderRadius","background","border","margin","RokuSelectorOption","_ref2","selected","alignItems","RokuSelector_Indicator","RokuSelector","map","RokuSelector_RokuSelectorOption","Object","assign","newRoku","setItem","JSON","stringify","setRoku","buttonStyle","TV","justifyContent","App","src_components_Remote","position","bottom","left","src_components_RokuSelector","top","right","src_components_TV","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33e8ce8f.chunk.js","sourcesContent":["import config from \"config.json\";\nimport { isString } from \"util\";\nimport { toast } from \"react-toastify\";\nimport { createContext, FunctionComponent } from \"react\";\nimport React from \"react\";\n\nconst KEY = \"roku\";\n\ninterface Roku {\n  name: string;\n  ip: string;\n}\n\nfunction isRoku(value: any): value is Roku {\n  return value && isString(value.name) && isString(value.ip);\n}\n\nconst storedState = localStorage.getItem(KEY);\nlet roku = isRoku(storedState) ? storedState : config.rokus[0];\n// const { Provider, Consumer } = createContext(roku);\n\n// export const RokuConsumer = Consumer;\n\n// export const RokuContext: FunctionComponent =\n//   () => (\n//     <Provider value={}>\n\n//     </Provider>\n//   );\n\n// https://developer.roku.com/docs/developer-program/discovery/external-control-api.md#keypress-example\nexport type Key =\n  | \"Home\"\n  | \"Rev\"\n  | \"Fwd\"\n  | \"Play\"\n  | \"Select\"\n  | \"Left\"\n  | \"Right\"\n  | \"Down\"\n  | \"Up\"\n  | \"Back\"\n  | \"InstantReplay\"\n  | \"Info\"\n  | \"Backspace\"\n  | \"Search\"\n  | \"Enter\"\n  | \"VolumeDown\"\n  | \"VolumeMute\"\n  | \"VolumeUp\"\n  | \"PowerOff\"\n  ;\n\nexport const pressKey: (key: Key) => void =\n  (key) =>\n    fetch(`http://${roku.ip}:8060/keypress/${key}`, { method: \"post\", mode: \"no-cors\" })\n      .catch(toast.error);\n\nexport const setRoku: (newRoku: Roku) => void =\n  (newRoku) => {\n    try {\n      localStorage.setItem(KEY, JSON.stringify(newRoku));\n      roku = newRoku;\n    } finally {\n      toast.error(\"Failed to update the roku\");\n    }\n  }\n\nexport const getRoku: () => Roku =\n  () => roku;\n\n","import React from \"react\";\nimport { Circle, Home, ChevronLeft, ChevronDown, ChevronUp, ChevronRight, ArrowLeft, Rewind, Play, Pause, FastForward, Loader, RotateCcw } from \"react-feather\";\nimport { pressKey } from \"services/roku\";\nimport \"./Remote.css\";\n\nconst size = 50;\nconst gridScaleFactor = 2.3;\nconst padding = size / 2;\nconst flexGrow = 1;\n\nconst flexCellStyle = { flexGrow, padding };\nconst flexRowStyle = { display: \"flex\" };\nconst gridStyle = { display: \"grid\", gridTemplateColumns: \"auto auto auto\" };\n\nconst Remote =\n  () => (\n    <div style={{ maxWidth: 500, textAlign: \"center\" }}>\n      <div style={flexRowStyle}>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Back\")}>\n          <ArrowLeft size={size} />\n        </div>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Home\")}>\n          <Home size={size} />\n        </div>\n      </div>\n      <div style={gridStyle}>\n        <div />\n        <div className=\"remote-button\" onClick={() => pressKey(\"Up\")}>\n          <ChevronUp size={gridScaleFactor * size} />\n        </div>\n        <div />\n        <div className=\"remote-button\" onClick={() => pressKey(\"Left\")}>\n          <ChevronLeft size={gridScaleFactor * size} />\n        </div>\n        <div className=\"remote-button\" onClick={() => pressKey(\"Select\")}>\n          <Circle size={gridScaleFactor * size} />\n        </div>\n        <div className=\"remote-button\" onClick={() => pressKey(\"Right\")}>\n          <ChevronRight size={gridScaleFactor * size} />\n        </div>\n        <div />\n        <div className=\"remote-button\" onClick={() => pressKey(\"Down\")}>\n          <ChevronDown size={gridScaleFactor * size} />\n        </div>\n        <div />\n      </div>\n      <div style={flexRowStyle}>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"InstantReplay\")}>\n          <RotateCcw size={size} />\n        </div>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Info\")}>\n          <Loader size={size} />\n        </div>\n      </div>\n      <div style={flexRowStyle}>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Rev\")}>\n          <Rewind size={size} />\n        </div>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Play\")}>\n          <Play size={size} />\n          <Pause size={size} />\n        </div>\n        <div className=\"remote-button\" style={flexCellStyle} onClick={() => pressKey(\"Fwd\")}>\n          <FastForward size={size} />\n        </div>\n      </div>\n    </div>\n  );\n\nexport default Remote;\n","import config from \"config.json\";\nimport { FunctionComponent } from \"react\";\nimport React from \"react\";\nimport { setRoku, getRoku } from \"services/roku\";\nimport \"./RokuSelector.css\";\n\nconst Indicator: FunctionComponent<{ on?: boolean }> =\n  ({ on }) => (\n    <div\n      style={{\n        display: \"inline-block\",\n        width: \"0.8em\",\n        height: \"0.8em\",\n        borderRadius: \"50%\",\n        background: on ? \"rgb(102, 45, 143)\" : \"#333\",\n        border: \"0.2em solid #333\",\n        margin: \"0.5em\"\n      }}\n    />\n  )\n\ninterface RokuSelectorOptionProps {\n  name: string;\n  ip: string;\n  selected?: boolean;\n  onClick: () => void;\n}\n\nconst RokuSelectorOption: FunctionComponent<RokuSelectorOptionProps> =\n  ({ name, selected, onClick }) => (\n    <div style={{ display: \"flex\", alignItems: \"center\" }} onClick={onClick}>\n      <Indicator on={selected} /> <div>{name}</div>\n    </div>\n  );\n\nconst RokuSelector =\n  () => (\n    <div className=\"roku-selector\" style={{ padding: \"0.3em\", display: \"flex\" }}>\n      <div className=\"placeholder\" />\n      <div className=\"options\">\n        {config.rokus.map((roku) => (\n          <RokuSelectorOption\n            {...roku}\n            onClick={() => setRoku(roku)}\n            selected={roku.name === getRoku().name}\n            key={roku.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n\nexport default RokuSelector;\n","import React, { FunctionComponent } from 'react';\nimport { Power, Volume1, Volume2, VolumeX } from \"react-feather\";\nimport \"./TV.css\";\nimport { pressKey } from 'services/roku';\n\nconst size = 50;\nconst padding = 10;\n\nconst buttonStyle = { padding };\n\nconst TV: FunctionComponent =\n  () => (\n    <div className=\"tv\" style={{ padding: \"0.3em\", display: \"flex\" }}>\n      <div className=\"options\">\n        <div className=\"tv-button\" style={buttonStyle}>\n          <Power className=\"power-button\" size={size} onClick={() => pressKey(\"PowerOff\")} />\n        </div>\n        <div className=\"tv-button\" style={buttonStyle}>\n          <Volume2 size={size} onClick={() => pressKey(\"VolumeUp\")} />\n        </div>\n        <div className=\"tv-button\" style={buttonStyle}>\n          <Volume1 size={size} onClick={() => pressKey(\"VolumeDown\")} />\n        </div>\n        <div className=\"tv-button\" style={buttonStyle}>\n          <VolumeX size={size} onClick={() => pressKey(\"VolumeMute\")} />\n        </div>\n      </div>\n      <div className=\"placeholder\" />\n    </div>\n  )\n\nexport default TV;\n","import React from 'react';\nimport Remote from 'components/Remote';\nimport RokuSelector from './RokuSelector';\nimport TV from './TV';\n\nconst style = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  height: \"100%\"\n};\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\" style={style} >\n      <Remote />\n      <div style={{ position: \"absolute\", bottom: 0, left: 0 }}>\n        <RokuSelector />\n      </div>\n      <div style={{ position: \"absolute\", top: \"10%\", right: 0 }}>\n        <TV />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}